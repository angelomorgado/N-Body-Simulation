#version 460 core

layout (local_size_x = 64) in;

layout(std430, binding = 0) buffer _vertexPosition {
    vec3 vertexPosition[];
};
layout(std430, binding = 1) buffer _vertexSize{
    float vertexSize[];
};
layout(std430, binding = 2) buffer _vertexRadius{
    float vertexRadius[];
};
layout(binding = 3, std430) buffer _vertexColor{
    vec4 vertexColor[];
};
layout(std430, binding = 4) buffer _vertexVelocity{
    vec3 vertexVelocity[];
};
layout(std430, binding = 5) buffer _vertexMass{
    float vertexMass[];
};

// Uniforms
uniform float deltaTime;

// Functions
vec3 computeForces(vec3 position, float mass)
{
    return vec3(0.0, -9.8, 0.0) * mass;        
}

float get_centripetal_acceleration(vec3 velocity, float radius)
{
    float centripetal_acceleration = pow(length(velocity), 2.0) / radius;
    return centripetal_acceleration;
}

void main()
{ 
    uint id = gl_GlobalInvocationID.x;
    // change the color of the particle to a random color
    // vertexColor[id] = vec4(1.0, 0.0, 0.0, 1.0);
    
    // Move the particle in circles using the radius and the position
    vec3 forces = computeForces(vertexPosition[id], 1.0);
    // float centripetal_acceleration = get_centripetal_acceleration(vertexVelocity[id], vertexRadius[id]);
    // vec3 centripetal_force = normalize(vertexVelocity[id]) * centripetal_acceleration;
    // vec3 acceleration = (forces - centripetal_force) / vertexMass[id];
    // vertexVelocity[id] += acceleration * deltaTime;
    // vertexPosition[id] += forces * deltaTime;

    // 
}