#version 460 core

layout (local_size_x = 64) in;

layout(std430, binding = 0) buffer _vertexPosition {
    vec4 vertexPosition[];
};
layout(std430, binding = 1) buffer _vertexSize{
    float vertexSize[];
};
layout(std430, binding = 2) buffer _vertexRadius{
    float vertexRadius[];
};
layout(binding = 3, std430) buffer _vertexColor{
    vec4 vertexColor[];
};
layout(std430, binding = 4) buffer _vertexVelocity{
    vec4 vertexVelocity[];
};
layout(std430, binding = 5) buffer _vertexMass{
    float vertexMass[];
};

// #-------------Black Hole------------#
uniform float gravity = 1000.0; 
uniform float deltaT = 0.0007;
uniform float max_distance = 30.0;

void black_hole(uint id, vec3 black_hole_position)
{
    // Force from first black hole
    vec3 force = vec3(0.0);
    vec3 dist = black_hole_position - vertexPosition[id].xyz;
    force = (gravity / length(dist)) * normalize(dist);

    // Reset particles that go to far away from the black hole (attraction point)
    if(length(dist) > max_distance)
    {
        vertexPosition[id].xyz = vec3(0.0,0.0,0.0);
    }
    else
    {
        vec3 acceleration = force * 1.0/vertexMass[id];
        vertexPosition[id].xyz = vec3(vertexPosition[id].xyz + (vertexVelocity[id].xyz * deltaT) + (0.5 * acceleration * dot(deltaT,deltaT)));
        vertexVelocity[id].xyz = vec3(vertexVelocity[id].xyz + (acceleration * deltaT));
    }
}
// #-----------------------------------#
void main()
{ 
    uint id = gl_GlobalInvocationID.x;
    // change the color of the particle to a random color
    vertexColor[id] = vec4(sin(vertexPosition[id].x), cos(vertexPosition[id].y), sin(vertexPosition[id].z), 1.0);

    // Black Hole Implementation
    black_hole(id, vec3(0.0,0.0,0.0));
}